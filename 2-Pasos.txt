1) Docker compose: imagen en base de datos
    - creamos el archivo docker-compose.yaml
    - escribimos codigo en ese archivo
    - ejecutamos ->    docker-compose up -d
    - en el gitignore escribimos /mongo
    - vamos a mongo compass, new conection y escribimos mongodb://localhost:27017/entriesdb
      el numero es el puerto que habiamos escrito en el archivo de docker
       y entriesdb es el nombre

2) Resful API:
  - api > seed.ts en este archivo vamos a poder hacer las peticiones put,
    post, etc. Funciona exactamente igual que router
  - database > db.ts
  - instalamos mongoose npm install mongoose --save es un ODM object data modeling
    nos ayuda a trabajar con mongo facilmente
  - en db vamos a crear las funciones para conectarnos y desconectarnos
    de la db

3) Variables de entorno:
  - creamos el archivo .env en la raiz del proyecto
  - la agregamos al gitignore
  - Las variables de entorno se ejecutan de lado del servidor, por lo tanto del lado del front
    Son inaccesibles, para que se puedan acceder del lado del front en next debemos llamarlas
    NEXT_PUBLIC_NOMBRE_VARIABLE de esta forma next sabe que es una variable de acceso publico
  - Acordarse que siempre al agregar una variable de entorno hay que levantar la app de nuevo
  - Dentro de la variable agregamos la conexion a mongo
  - Creamos un archivo .env.template, que va a ser una copia del env pero sin las keys, solo
    con sus nombres, para que cuando otros vean nuestro codigo sepan que esas son las 
    variables y ellos las rellenen con sus propias keys (es considerado una buena practica)
  - en el archivo seeds creamos un condicioinal que se va a ejecutar solo cuando esta en
    produccion, que va a conectar y desconectar la base de datos
  - vamos al archivo db.ts y en await mongoose.connect() agregamos la variable de 
    entorno de mongo

    4) Lecturas, Inserciones, etc en mongo:
      - models > Entry.ts 

      -------!!!!!----------
      - Como se cuando de ejecuta del lado del cliente o de lado del servidor?
        La forma mas facil es preguntarnos quien lo esta llamando. Por ejemplo
        si lo llamamos desde api, algun archivo que empiece con _ o desde server side
        props o static props es del lado del servidor
      -------!!!!!----------

      - en este archivo vamos a crear un esquema de datos para un objeto de entrada
      - usamos mongoose para crearlo
      - hacemos un extend de la interface de Entry

    5) Llenando la base de datos:
      - api > seed-data.ts en este archivo vamos a poner la info que queremos
        cargar de forma automatica
      - En seed.ts vamos entre el connectDB y el disconnectDB vamos a escribir el codigo
        para poder insertar datos en mongo
      - ejecutamos en postman usando la url de siempre http://localhost:3000/api/seed
        y corroboramos que en mongo se hayan cargado las entradas
      - hacemos una correccion en db.ts para que no se nos desconecte cuando
        la variable de node esta en desarrollo
      - Hay que tener cuidado con el archivo seed ya que solo es para desarrollo

    6) Obteniendo las entradas:
      - api > entries > index.ts vamos a crear los endpoints para obtener
        las entradas 
      - creamos un switch para manejar los metodos http 
      - creamos una funcion que se va a encargar de obtener las entradas
      - dentro de esa funcion, la const entries devuelve todas las entradas
        y las devuelve  

    7) Leer las entradas del backend : READ
      - instalamos axios
      - apis > entriesApi.ts en este archivo creamos con axios el llamado
        a nuestra api
      - en EntriesProvider creamos una funcion refreshEntries que va allamar a axios para
        traer la data
      - creamos un useEffect que va a ejecutar esa funcion
      - en entriesReducer creamos una action nueva y un case
      - volvemos al EntriesProvider y a la funcion creada le agregamos 
        el dispatch y que como payload va a tener la data traida con axios
      - ahora podemos ver las entradas en nuestra app desde la db
    
    8) Crear una entrada en el backend: CREATE
      - pages > api > entries > index.ts
      - creamos la funcion postEntry que se va a encargar cargar los archivos en la db
      - va a tener una request y una response 
      - en Entry.ts agregamos como valor por defecto "pending" en caso de que no
        se mande nada 
      - index.ts creamos un case "POST" en el switch. ejecuta la funcion postEntry

      9) Crear una entrada en el front: CREATE
      - en EntriesProvider en la funcion addNewEntry borramos el objeto newEntry
      - creamos una constante que va a traer la data de axios para luego despacharla
        como payload

    10) Actualizar una entrada en particular: UPDATE
      - pages > api > entries > [id].ts
      - creamos un type
      - creamos una funcion con un switch con el endpoint "PUT"
      - creamos la funcion updateEntry 

      Continuacion:
      - en la funcion updateEntry al final vamos a agregar un trycatch, en el 
        que modificamos la estructura final se la funcion
    
    11) Actualizar entrada en el Front: UPDATE
      - EntriesProvider en la funcion updateEntry agregamos un trycatch
      - desestructuramos el entry, asi solo obtenemos el id, la description y el status
        que es lo unico que vamos a usar
      - usamos casi la misma linea de codigo que habiamos usado en la funcion de addNewEntry
        para mandar la data, solo que camiamos el metodo por "put", a la url le agregamos el id
        y ademas de la description tambien mandamos el status

  12) Obtener entradas por ID:
    - en [id] creamos la funcion getEntry
    - es igual a la primera parte de la funcion updateEntry

  13) Middlewares:
    - Nos permite ejecutar cierto codigo antes de que de entrar a una pagina
      o ruta. Nosotros lo vamois a usar para validar que sea un MongoId, ya que
      si no lo es la db va a dar un error

    14) Middlewares pt2:
      - en la raiz creamos el archivo middleware.ts (se tiene que llamar asi)
      - copiamos el codigo de
      https://nextjs.org/docs/pages/building-your-application/routing/middleware
      - hacemos algunas modificaciones en la funcion y en el matcher

    15) Middlewares pt3: Verificar que sea un MongoId
    - creamos un condicional en el archivo que va a evaluar el id
    - api > bad-request.ts creamos un nuevo endpoint, el cual vamos
      a manejar con nuestros bad request
  
  16) Pantalla para editar una entrada:
    - pages > entries > [id].tsx
    - creamos la pantalla y formulario con los estilos
    
    17) Manejo del formulario:
    - en [id].tsx creamos 3 useState para manejar los estados
      - para el input 
      - para el estado de la entry
      - para ver si se toco ---> validacion
    
    18) Validacion:
    - Creamos la validacion con el input y el button
    - memorizamos el inputValue y el touched

    19) SSR getServerSideProps:
    - Cuando alguien solicite esta pagina, va a venir precargada con info del lado
      del servidor
    - [id].tsx usamos el snippet nextgetSSRProps
    - obtenemos el id de los params
    - creamos un condicional para que verifique si es un id de mongo y si no lo es te
      direcciona al home
    - a las props pasamos el id
    - creamos la interface Props que va a tener el id
    - recibimos las props en el componente

    20) Navegar y cargar la entrada mediante SSR: UPDATE
    - en EntryCard creamos una funcion que al hacerle click nos manda a "/entries/ + el id"
    - y en el NavBar agregamos para que al hacer click en OpenJira nos mande a "/"
    - database > dbEntries.ts y creamos la funcion getEntriesById
    - usamos metodos de mongoose y traemos el id y tambien hacemois la verificacion
      ahi mismo de que sea un id de mongo borramos la verificacion anterior
    - en [id].tsx creamos una constante que  va a llamar getEntriesById
    - esa constante la reemplazamos en el condicional y la agregamos a la prop
    - en dbEntries a la funcion getEntriesById le agregamos un json parse y stringify,
      para que pueda traer el id de forma correcta
    - en [id].tsx solo nos queda pasar entry al EntryPage y repartimos el entry en los
      useState
    
    21) Guardar la informaciond e la entrada: UPDATE
    - en [id].tsx llamamos al context y traemos la funcion updateEntry
    - creamos la funccion on save donde, validamos que la entrada no este vacia,
      desestructuramos la entry para no sobreescribir todo y luego se la pasamos a
      updateEntry
    - npm i notistack
    - esto usa un provider, entonces vamos a _app y lo agregamos por encima de todos
    - esto tamb usa un customHook asi que en EntriesProvider lo importamos, lo agregamos en
      el updateEntry
    - tambien a esta funcion le agregamos una prop nueva, asi podemos configurar que solo
      se muestre cuando editamos y no cuando hacemos el drag and drop 
    - en EntriesContext al updateEntry le agregamos showSnackBar como opcional y con 
      valor booleano 
    - finalmente en [id].tsx al update entry le agregamos un true como segundo argumento

    22) Calcular el tiempo desde la publicacion:
    - instalamos date fns npm install date-fns --save
    - utils > dateFunctions.ts creamos una funcion que usa una funcion de
      date fns
    - en EntryCard vamos a la parte que tendria hace cuanto se creo, importamos
      la funcion y le pasamos el entry.createdAt
    - volvemos a dateFunctions.ts, lo pasamos a espaÃ±ol con el objeto locale
      y le agregamos con backticks el "hace"
    - aplicamos la misma funcion en api > entries > [id].tsx